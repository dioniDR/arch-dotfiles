#!/bin/bash

# GRUB USB Auto-Detection Script for Arch Linux
# Configures GRUB to automatically detect USB bootable devices
# Compatible with arch-dotfiles project

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    print_error "This script requires root privileges. Please run with sudo."
    exit 1
fi

# Function to check if USB is connected
check_usb() {
    print_status "Checking for USB devices..."
    
    # Look for USB devices with Arch Linux
    USB_DEVICES=$(lsblk -f | grep -i "arch" | grep "sd" || true)
    
    if [[ -z "$USB_DEVICES" ]]; then
        print_warning "No USB device with 'ARCH' label found."
        print_warning "Make sure your USB device is connected and properly labeled."
        return 1
    fi
    
    echo "Found USB devices:"
    echo "$USB_DEVICES"
    return 0
}

# Function to create GRUB USB detection script
create_grub_usb_script() {
    print_status "Creating GRUB USB detection script..."
    
    # Create the script content
    cat > /tmp/25_arch_usb << 'EOF'
#!/bin/bash

# GRUB script to detect and add Arch Linux USB entries
# Generated by arch-dotfiles GRUB USB autodetect script

set -e

# Function to add USB entry
add_usb_entry() {
    local device="$1"
    local uuid="$2"
    local label="$3"
    
    cat << ENTRY_EOF

menuentry "Arch Linux USB ($label)" {
    insmod part_gpt
    insmod fat
    insmod ext2
    insmod ext4
    search --no-floppy --fs-uuid --set=root $uuid
    echo 'Loading Linux kernel from USB...'
    linux /boot/vmlinuz-linux root=UUID=$uuid rw
    echo 'Loading initial ramdisk from USB...'
    initrd /boot/initramfs-linux.img
}
ENTRY_EOF
}

# Scan for USB devices with Arch Linux
for device in $(lsblk -rno NAME,FSTYPE,LABEL,UUID | grep -E "sd.*ext4.*ARCH|sd.*ext4.*arch" | cut -d' ' -f1); do
    device_info=$(lsblk -rno NAME,FSTYPE,LABEL,UUID | grep "^$device ")
    uuid=$(echo "$device_info" | awk '{print $4}')
    label=$(echo "$device_info" | awk '{print $3}')
    
    if [[ -n "$uuid" ]] && [[ -n "$label" ]]; then
        add_usb_entry "/dev/$device" "$uuid" "$label"
    fi
done
EOF

    # Install the script
    print_status "Installing GRUB USB detection script..."
    cp /tmp/25_arch_usb /etc/grub.d/25_arch_usb
    chmod +x /etc/grub.d/25_arch_usb
    
    # Clean up
    rm -f /tmp/25_arch_usb
    
    print_status "GRUB USB detection script installed successfully!"
}

# Function to backup current GRUB config
backup_grub_config() {
    print_status "Creating backup of current GRUB configuration..."
    
    if [[ -f /boot/grub/grub.cfg ]]; then
        cp /boot/grub/grub.cfg /boot/grub/grub.cfg.backup.$(date +%Y%m%d_%H%M%S)
        print_status "Backup created successfully!"
    else
        print_warning "No existing GRUB configuration found."
    fi
}

# Function to test USB detection
test_usb_detection() {
    print_status "Testing USB detection..."
    
    if [[ -f /etc/grub.d/25_arch_usb ]]; then
        /etc/grub.d/25_arch_usb
        print_status "USB detection test completed!"
    else
        print_error "USB detection script not found!"
        return 1
    fi
}

# Function to regenerate GRUB config
regenerate_grub() {
    print_status "Regenerating GRUB configuration..."
    
    grub-mkconfig -o /boot/grub/grub.cfg
    
    print_status "GRUB configuration regenerated successfully!"
}

# Function to verify USB entry
verify_usb_entry() {
    print_status "Verifying USB entry in GRUB configuration..."
    
    if grep -q "Arch Linux USB" /boot/grub/grub.cfg; then
        print_status "✅ USB entry found in GRUB configuration!"
        grep -A 5 -B 5 "Arch Linux USB" /boot/grub/grub.cfg
        return 0
    else
        print_warning "⚠️  USB entry not found in GRUB configuration."
        return 1
    fi
}

# Main execution
main() {
    print_status "Starting GRUB USB Auto-Detection Setup..."
    echo "======================================"
    
    # Check for USB devices
    if ! check_usb; then
        print_error "No suitable USB device found. Please connect a USB device with Arch Linux."
        exit 1
    fi
    
    # Create backup
    backup_grub_config
    
    # Create and install USB detection script
    create_grub_usb_script
    
    # Test the detection
    test_usb_detection
    
    # Regenerate GRUB configuration
    regenerate_grub
    
    # Verify the entry was added
    if verify_usb_entry; then
        print_status "✅ GRUB USB auto-detection setup completed successfully!"
        echo ""
        print_status "Your USB device will now appear in the GRUB menu as 'Arch Linux USB'."
        print_status "Reboot to see the new entry in your GRUB menu."
    else
        print_error "❌ Setup completed but USB entry verification failed."
        print_error "Please check the GRUB configuration manually."
    fi
    
    echo "======================================"
    print_status "Setup complete!"
}

# Run main function
main "$@"